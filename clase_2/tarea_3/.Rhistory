rll<-lm(PC~PT,window_at_i)
c<-c(i)
input<-as.data.frame(c)
names(input)<-c("PT")
medias[i,2]<-predict(rll, newdata=input)
}
#el loop se para en 271
#_________________________________
#Grafico
#_________________________________
ggplot(obs, aes(x=PT, y= PC))  + geom_point()+
geom_line(data = medias, aes(x = PT, y =PC), color="red") + labs(title="RLL")
}
g_nad_watson(SRT)
g_nad_watson(SRT,10)
g_nad_watson(SRT,400)
g_nad_watson(SRT,300)
g_nad_watson(SRT,271)
g_nad_watson(SRT,272)
g_nad_watson(SRT,276)
g_nad_watson(SRT,280)
g_nad_watson(SRT,300)
g_nad_watson(SRT,290)
#_________________________________
#Graficas RLL
#_________________________________
g_nad_watson <- function(h,limit) {
#para estimar la curva total, esta vez aplicaré un for loop
#primero creo una base de datos vacía con 600 puntos para nuestro rango de PT
medias<-as.data.frame(seq.int(1, 600, by = 1))
names(medias)<-c("PT")
#luego estimo el primer punto para PT=1
a<-1-h
b<-1+h
window_at_1<-data %>% filter(PT<b & PT >a)  %>% select(PT, PC) %>% na.omit()
rllz<-lm(PC~PT,window_at_1)
a<-c(1)
input<-as.data.frame(a)
names(input)<-c("PT")
medias$PC[1]<-NA
medias[1,2]<-  predict(rllz, newdata=input)
#ahora recorro la ventana de la regresión para sacar la media condicional de cada regresión de cada intervalo
for (i in 2:limit){ #elijo 271 porque a partir de PT > 271, el loop falla por NAs.
a<-i-h
b<-i+h
window_at_i<-data %>% filter(PT<b & PT >a) %>% select(PT, PC) %>% na.omit()
rll<-lm(PC~PT,window_at_i)
c<-c(i)
input<-as.data.frame(c)
names(input)<-c("PT")
medias[i,2]<-predict(rll, newdata=input)
}
#el loop se para en 271
#_________________________________
#Grafico
#_________________________________
ggplot(obs, aes(x=PT, y= PC))  + geom_point()+
geom_line(data = medias, aes(x = PT, y =PC), color="red") + labs(title="RLL")+ylim(0,12)
}
g_nad_watson(SRT,290)
#_________________________________
#Graficas RLL
#_________________________________
rll_manual <- function(h,limit) {
# Argumentos:
# h: Bandiwth
# limit: Limite de PT debido a que la función se traba en discontinuidades dependiendo el BW
#para estimar la curva total, esta vez aplicaré un for loop
#primero creo una base de datos vacía con 600 puntos para nuestro rango de PT
medias<-as.data.frame(seq.int(1, 600, by = 1))
names(medias)<-c("PT")
#luego estimo el primer punto para PT=1
a<-1-h/2
b<-1+h/2
window_at_1<-data %>% filter(PT<b & PT >a)  %>% select(PT, PC) %>% na.omit()
rllz<-lm(PC~PT,window_at_1)
a<-c(1)
input<-as.data.frame(a)
names(input)<-c("PT")
medias$PC[1]<-NA
medias[1,2]<-  predict(rllz, newdata=input)
#ahora recorro la ventana de la regresión para sacar la media condicional de cada regresión de cada intervalo
for (i in 2:limit){ #elijo 271 porque a partir de PT > 271, el loop falla por NAs.
a<-i-h/2
b<-i+h/2
window_at_i<-data %>% filter(PT<b & PT >a) %>% select(PT, PC) %>% na.omit()
rll<-lm(PC~PT,window_at_i)
c<-c(i)
input<-as.data.frame(c)
names(input)<-c("PT")
medias[i,2]<-predict(rll, newdata=input)
}
#el loop se para en 271
#_________________________________
#Grafico
#_________________________________
ggplot(obs, aes(x=PT, y= PC))  + geom_point()+
geom_line(data = medias, aes(x = PT, y =PC), color="red") + labs(title="RLL")+ylim(0,12)
}
rll_manual{SRT,271}
#_________________________________
#Graficas RLL
#_________________________________
rll_manual <- function(h,limit) {
# Argumentos:
# h: Bandiwth
# limit: Limite de PT debido a que la función se traba en discontinuidades dependiendo el BW
#para estimar la curva total, esta vez aplicaré un for loop
#primero creo una base de datos vacía con 600 puntos para nuestro rango de PT
medias<-as.data.frame(seq.int(1, 600, by = 1))
names(medias)<-c("PT")
#luego estimo el primer punto para PT=1
a<-1-h/2
b<-1+h/2
window_at_1<-data %>% filter(PT<b & PT >a)  %>% select(PT, PC) %>% na.omit()
rllz<-lm(PC~PT,window_at_1)
a<-c(1)
input<-as.data.frame(a)
names(input)<-c("PT")
medias$PC[1]<-NA
medias[1,2]<-  predict(rllz, newdata=input)
#ahora recorro la ventana de la regresión para sacar la media condicional de cada regresión de cada intervalo
for (i in 2:limit){ #elijo 271 porque a partir de PT > 271, el loop falla por NAs.
a<-i-h/2
b<-i+h/2
window_at_i<-data %>% filter(PT<b & PT >a) %>% select(PT, PC) %>% na.omit()
rll<-lm(PC~PT,window_at_i)
c<-c(i)
input<-as.data.frame(c)
names(input)<-c("PT")
medias[i,2]<-predict(rll, newdata=input)
}
#el loop se para en 271
#_________________________________
#Grafico
#_________________________________
ggplot(obs, aes(x=PT, y= PC))  + geom_point()+
geom_line(data = medias, aes(x = PT, y =PC), color="red") + labs(title="RLL")+ylim(0,12)
}
rll_manual(SRT,271)
rll_manual(SRT,300)
rll_manual(SRT,272)
rll_manual(SRT,271)
g_nad_watson(1,290)
rll_manual(1,290)
rll_manual(1,271)
rll_manual(1,100)
rll_manual(2,100)
rll_manual(1,2)
rll_manual(5,271)
rll_manual(1,50)
rll_manual(1,20)
rll_manual(1,10)
rll_manual(1,15)
rll_manual(1,10)
rll_manual(1,9)
rll_manual(5,271)
rll_manual(5,200)
rll_manual(5,100)
rll_manual(5,50)
rll_manual(20,271)
rll_manual(5,50)
rll_manual(20,50)
rll_manual(50,50)
rll_manual(100,50)
rll_manual(5,50)
rll_manual(20,100)
rll_manual(50,50)
rll_manual(100,50)
rll_manual(5,50)
rll_manual(20,100)
rll_manual(50,100)
rll_manual(100,100)
rll_manual(5,50)
rll_manual(20,120)
rll_manual(50,100)
rll_manual(100,100)
rll_manual(5,50)
rll_manual(20,120)
rll_manual(50,150)
rll_manual(100,150)
rll_manual(5,50)
rll_manual(20,120)
rll_manual(50,200)
rll_manual(100,200)
rll_manual(5,50)
rll_manual(20,120)
rll_manual(50,250)
rll_manual(100,250)
rll_manual(5,50)
rll_manual(20,150)
rll_manual(50,250)
rll_manual(100,250)
rll_manual(5,50)
rll_manual(20,150)
rll_manual(50,250)
rll_manual(100,600)
rll_manual(5,50)
rll_manual(20,150)
rll_manual(50,500)
rll_manual(5,50)
rll_manual(20,150)
rll_manual(50,400)
rll_manual(5,50)
rll_manual(20,150)
rll_manual(50,300)
rll_manual(5,50)
rll_manual(20,150)
rll_manual(50,270)
rll_manual(5,50)
rll_manual(20,150)
rll_manual(50,250)
rll_manual(100,400)
rll_manual(5,50)
rll_manual(20,150)
rll_manual(50,250)
rll_manual(100,300)
rll_manual(5,50)
rll_manual(20,150)
rll_manual(50,250)
rll_manual(100,250)
#rll_manual(1,50)  con un BW=1 nolo pude estimar debido a tanta discontinuidad
a<-rll_manual(5,50)
b<-rll_manual(20,150)
c<-rll_manual(50,250)
d<-rll_manual(100,250)
ggarrange(a, b, c,d, ncol = 2, nrow = 2, labels = c("BW=5","BW=20","BW=50","BW=100"))
#_________________________________
#Graficas RLL
#_________________________________
rll_manual <- function(h,limit) {
# Argumentos:
# h: Bandiwth
# limit: Limite de PT debido a que la función se traba en discontinuidades dependiendo el BW
#para estimar la curva total, esta vez aplicaré un for loop
#primero creo una base de datos vacía con 600 puntos para nuestro rango de PT
medias<-as.data.frame(seq.int(1, 600, by = 1))
names(medias)<-c("PT")
#luego estimo el primer punto para PT=1
a<-1-h/2
b<-1+h/2
window_at_1<-data %>% filter(PT<b & PT >a)  %>% select(PT, PC) %>% na.omit()
rllz<-lm(PC~PT,window_at_1)
a<-c(1)
input<-as.data.frame(a)
names(input)<-c("PT")
medias$PC[1]<-NA
medias[1,2]<-  predict(rllz, newdata=input)
#ahora recorro la ventana de la regresión para sacar la media condicional de cada regresión de cada intervalo
for (i in 2:limit){ #elijo 271 porque a partir de PT > 271, el loop falla por NAs.
a<-i-h/2
b<-i+h/2
window_at_i<-data %>% filter(PT<b & PT >a) %>% select(PT, PC) %>% na.omit()
rll<-lm(PC~PT,window_at_i)
c<-c(i)
input<-as.data.frame(c)
names(input)<-c("PT")
medias[i,2]<-predict(rll, newdata=input)
}
#el loop se para en 271
#_________________________________
#Grafico
#_________________________________
ggplot(obs, aes(x=PT, y= PC))  + geom_point()+
geom_line(data = medias, aes(x = PT, y =PC), color="red")+ylim(0,12)
}
rll_manual(SRT,271)+ labs(title="RLL") #porque en PT=271 se presentó la primera discontinuidad
#rll_manual(1,50)  con un BW=1 nolo pude estimar debido a tanta discontinuidad
a<-rll_manual(5,50) + labs(title="RLL BW=5")
b<-rll_manual(20,150)+ labs(title="RLL BW=20")
c<-rll_manual(50,250) + labs(title="RLL BW=50")
d<-rll_manual(100,250) + labs(title="RLL BW=100")
ggarrange(a, b, c,d, ncol = 2, nrow = 2)
#_________________________________
#Graficas
#_________________________________
gnw<-as.data.frame(g_nad_watson(x=x,X=X,Y=Y,h=1))
#_________________________________
#Graficas NW
#_________________________________
gnw<-as.data.frame(g_nad_watson(x=x,X=X,Y=Y,h=1))
knitr::opts_chunk$set(echo = F, message=F, include = F,warning = F)
#cargo librerias
library(readr)
library(stargazer)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(regpro)
library(gplots)
data<-read_csv("data.csv")
data$PC<-100*data$tot_cases/data$population
data$PT<-100*data$tot_tests/data$population
ggplot(data, aes(x=PT)) +
geom_histogram(color="black", fill="white")+
labs(title="Histograma PC")
#calculo srt solo con observaciones completas
sd_bind<-sd(data$PT %>% na.omit())
n<-length(data$PT %>% na.omit())
(SRT<-sd_bind*1.06*(n)^(-.2))
ggplot(data, aes(x=PT)) +
geom_histogram(color="black", fill="white", binwidth = SRT)+
labs(title="Histograma con SRT")
# A) calculo los limites del intervalo centrado
(a<-5-SRT/2)
(b<-5+SRT/2)
# B) cuento los k intervalos
## primero calculo el valor más grande que será el limite derecho
(limite_sup<-max(data$PT %>% na.omit()))
## Luego calculo la extensión total del histograma con la centralización en 5. Es decir, al valor más grande le sumo -a.  A esta distancia la divido entre el bandwith y la redondeo hacia arriba. De esta manera, obtengo la cantidad k de intervalos.
(k_intervalos<-ceiling((limite_sup-a)/SRT))
# C) cuento las observaciones dentro de ese intervalo.
(n_c<-count(data %>% filter(PT<b & PT >a)%>% select(PT) %>% na.omit()))
# D) Calcúlo densidad
(density_5<-n_c*k_intervalos/(n*SRT))
ggplot(data, aes(x=PT)) +
geom_histogram(boundary = a,color="black", fill="white", binwidth = SRT)+
labs(title="Histograma centrado en PT=5")
#creamos un loop que nos arroje el movimiento de la ventana de tamaño SRT iniciando en 5 hasta hasta que superemos el limite de la sobservaciones
x<-5
while (x< limite_sup)
{
print(x)
x<-x+SRT
}
ggplot(data, aes(x=PT))+
geom_histogram(boundary = a,color="black", fill="white", binwidth = SRT,aes(y=..density..), position="identity", alpha=0.5)+
geom_density(alpha=1,bw=SRT)+ labs(title="Histograma con SRT")
geom_density()
a<-ggplot(data, aes(x=PT))+
geom_histogram(boundary = a,color="black", fill="white", binwidth = SRT,aes(y=..density..), position="identity", alpha=0.5)+ labs(title="Kernel rectangular (uniforme)")+
stat_density(kernel = "r", bw = SRT, fill = NA, col = "red")
b<-ggplot(data, aes(x=PT))+
geom_histogram(boundary = a,color="black", fill="white", binwidth = SRT,aes(y=..density..), position="identity", alpha=0.5)+ labs(title="Kernel triangular")+
stat_density(kernel = "t", bw = SRT, fill = NA, col = "blue")
c<-ggplot(data, aes(x=PT))+
geom_histogram(boundary = a,color="black", fill="white", binwidth = SRT,aes(y=..density..), position="identity", alpha=0.5)+ labs(title="Kernel Gaussian")+
stat_density(kernel = "g", bw = SRT, fill = NA, col = "black")
d<-d<-ggplot(data, aes(x=PT))+
geom_histogram(boundary = a,color="black", fill="white", binwidth = SRT,aes(y=..density..), position="identity", alpha=0.5)+ labs(title="Kernel Epanechnikov.")+
stat_density(kernel = "e", bw = SRT, fill = NA, col = "purple")
ggarrange(a, b, c,d, ncol = 2, nrow = 2)
ggplot(data, aes(x=PT))+
geom_histogram(boundary = a,color="black", fill="white", binwidth = SRT,aes(y=..density..), position="identity", alpha=0.5)+ labs(title="Todos los kernels")+
stat_density(kernel = "e", bw = SRT, fill = NA, col = "purple") +
stat_density(kernel = "r", bw = SRT, fill = NA, col = "red") +
stat_density(kernel = "t", bw = SRT, fill = NA, col = "blue") +
stat_density(kernel = "g", bw = SRT, fill = NA, col = "black")
a<-ggplot(data, aes(x=PT))+ labs(title="Kernel uniformw bw=.1")+
stat_density(kernel = "r", bw = .1, fill = NA, col = "red")
b<-ggplot(data, aes(x=PT))+ labs(title="Kernel uniformw bw=.5")+
stat_density(kernel = "r", bw = .5, fill = NA, col = "red")
c<-ggplot(data, aes(x=PT))+ labs(title="Kernel uniformw bw=1")+
stat_density(kernel = "r", bw = 1, fill = NA, col = "red")
d<-ggplot(data, aes(x=PT))+ labs(title="Kernel uniformw bw=2")+
stat_density(kernel = "r", bw = 2, fill = NA, col = "red")
e<-ggplot(data, aes(x=PT))+ labs(title="Kernel uniformw bw=4")+
stat_density(kernel = "r", bw = 4, fill = NA, col = "red")
ggarrange(a, b, c,d,e, ncol = 2, nrow = 3)
a<-ggplot(data, aes(x=PT))+ labs(title="Kernel gaussiano bw=.1")+
stat_density(kernel = "g", bw = .1, fill = NA, col = "black")
b<-ggplot(data, aes(x=PT))+ labs(title="Kernel gaussiano bw=.5")+
stat_density(kernel = "g", bw = .5, fill = NA, col = "black")
c<-ggplot(data, aes(x=PT))+ labs(title="Kernel gaussiano bw=1")+
stat_density(kernel = "g", bw = 1, fill = NA, col = "black")
d<-ggplot(data, aes(x=PT))+ labs(title="Kernel gaussiano bw=2")+
stat_density(kernel = "g", bw = 2, fill = NA, col = "black")
e<-ggplot(data, aes(x=PT))+ labs(title="Kernel gaussiano bw=4")+
stat_density(kernel = "g", bw = 3, fill = NA, col = "black")
ggarrange(a, b, c,d,e, ncol = 2, nrow = 3)
data_low<- data %>%select(PC,PT) %>% na.omit()
lw <- lowess(PC ~ PT, data_low )
plot(lw, main= "Relación con lowess" )
ggplot(data, aes(x=PT, y= PC)) +
geom_point() +
geom_smooth()+ labs(title="Relación con loess")
#_________________________________
#Estimación Nadayara-Watson manual
#_________________________________
#creo una función g(x) Nadaraya-Watson con kernel uniforme
g_nad_watson <- function(x, X, Y, h) {
# Argumentos:
# x: puntos donde vamos a estimar
# X: PT
# Y: PC
# h: bandwidth
# Formula NW uniforme
K <- sapply(X, function(Xi) dunif((x - Xi) / h) / h)
# Weights
W <- K / rowSums(K)
drop(W %*% Y)
}
# creo datos en formato adecuado
obs<-data %>% select(PC, PT) %>% na.omit() #observaciones completas sin NAs
x<-seq.int(1, 600, by = 1) #puntos que evaluaré (algo así como los inputs para g(x))
X<-obs$PT %>% as.vector() #mis Y y X en formato de vector
Y<-obs$PC %>% as.vector()
h<-SRT #banwidth
#_________________________________
#Estimación Nadayara-Watson manual
#_________________________________
#predicción en 50
gnw<-as.data.frame(g_nad_watson(x=x,X=X,Y=Y,h=h))
gnw[50,1]
#_________________________________
#Grafica Nadayara-Watson
#_________________________________
gnw$x <- seq.int(nrow(gnw))
names(gnw)<-c("y_pred","x")
ggplot(obs, aes(x=PT, y= PC)) +
geom_point() + labs(title="Nadaraya-Watson") +
geom_line(data = gnw, aes(x = x, y =y_pred), color="red")
#_________________________________
#Predicción puntual
#_________________________________
#creo intervalo con base en mi BW
a<-50-SRT/2
b<-50+SRT/2
#estimo el modelo con la ventana de datos
window_at_50<-data %>% filter(PT<b & PT >a)  %>% select(PT, PC) %>% na.omit()
rllz<-lm(PC~PT,window_at_50)
#Obtengo la predicción de PT=50
a<-c(50)
input<-as.data.frame(a)
names(input)<-c("PT")
predict(rllz, newdata=input)
#_________________________________
#Graficas NW
#_________________________________
gnw<-as.data.frame(g_nad_watson(x=x,X=X,Y=Y,h=1))
gnw$x <- seq.int(nrow(gnw))
names(gnw)<-c("y_pred","x")
a<-ggplot(obs, aes(x=PT, y= PC)) +
geom_point() +
labs(title="Nadaraya-Watson bw=1") +
geom_line(data = gnw, aes(x = x, y =y_pred), color="red")
gnw<-as.data.frame(g_nad_watson(x=x,X=X,Y=Y,h=5))
gnw$x <- seq.int(nrow(gnw))
names(gnw)<-c("y_pred","x")
b<-ggplot(obs, aes(x=PT, y= PC)) +
geom_point() +
labs(title="Nadaraya-Watson bw=5") +
geom_line(data = gnw, aes(x = x, y =y_pred), color="red")
gnw<-as.data.frame(g_nad_watson(x=x,X=X,Y=Y,h=20))
gnw$x <- seq.int(nrow(gnw))
names(gnw)<-c("y_pred","x")
c<-ggplot(obs, aes(x=PT, y= PC)) +
geom_point() +
labs(title="Nadaraya-Watson bw=20") +
geom_line(data = gnw, aes(x = x, y =y_pred), color="red")
gnw<-as.data.frame(g_nad_watson(x=x,X=X,Y=Y,h=50))
gnw$x <- seq.int(nrow(gnw))
names(gnw)<-c("y_pred","x")
d<-ggplot(obs, aes(x=PT, y= PC)) +
geom_point() +
labs(title="Nadaraya-Watson bw=50") +
geom_line(data = gnw, aes(x = x, y =y_pred), color="red")
gnw<-as.data.frame(g_nad_watson(x=x,X=X,Y=Y,h=100))
gnw$x <- seq.int(nrow(gnw))
names(gnw)<-c("y_pred","x")
e<-ggplot(obs, aes(x=PT, y= PC)) +
geom_point() +
labs(title="Nadaraya-Watson bw=100") +
geom_line(data = gnw, aes(x = x, y =y_pred), color="red")
ggarrange(a, b, c,d,e, ncol = 2, nrow = 3)
#_________________________________
#Graficas NW
#_________________________________
gnw<-as.data.frame(g_nad_watson(x=x,X=X,Y=Y,h=1))
gnw$x <- seq.int(nrow(gnw))
names(gnw)<-c("y_pred","x")
a<-ggplot(obs, aes(x=PT, y= PC)) +
geom_point() +
labs(title="Nadaraya-Watson bw=1") +
geom_line(data = gnw, aes(x = x, y =y_pred), color="red")
gnw<-as.data.frame(g_nad_watson(x=x,X=X,Y=Y,h=5))
gnw$x <- seq.int(nrow(gnw))
names(gnw)<-c("y_pred","x")
b<-ggplot(obs, aes(x=PT, y= PC)) +
geom_point() +
labs(title="Nadaraya-Watson bw=5") +
geom_line(data = gnw, aes(x = x, y =y_pred), color="red")
gnw<-as.data.frame(g_nad_watson(x=x,X=X,Y=Y,h=20))
gnw$x <- seq.int(nrow(gnw))
names(gnw)<-c("y_pred","x")
c<-ggplot(obs, aes(x=PT, y= PC)) +
geom_point() +
labs(title="Nadaraya-Watson bw=20") +
geom_line(data = gnw, aes(x = x, y =y_pred), color="red")
gnw<-as.data.frame(g_nad_watson(x=x,X=X,Y=Y,h=50))
gnw$x <- seq.int(nrow(gnw))
names(gnw)<-c("y_pred","x")
d<-ggplot(obs, aes(x=PT, y= PC)) +
geom_point() +
labs(title="Nadaraya-Watson bw=50") +
geom_line(data = gnw, aes(x = x, y =y_pred), color="red")
gnw<-as.data.frame(g_nad_watson(x=x,X=X,Y=Y,h=100))
gnw$x <- seq.int(nrow(gnw))
names(gnw)<-c("y_pred","x")
e<-ggplot(obs, aes(x=PT, y= PC)) +
geom_point() +
labs(title="Nadaraya-Watson bw=100") +
geom_line(data = gnw, aes(x = x, y =y_pred), color="red")
ggarrange(a, b, c,d,e, ncol = 2, nrow = 3)
ggplot(data, aes(x=PT))+
geom_histogram(boundary = a,color="black", fill="white", binwidth = SRT,
aes(y=..density..), position="identity", alpha=0.5)+
labs(title="Todos los kernels")+
stat_density(kernel = "e", bw = SRT, fill = NA, col = "purple") +
stat_density(kernel = "r", bw = SRT, fill = NA, col = "red") +
stat_density(kernel = "t", bw = SRT, fill = NA, col = "blue") +
stat_density(kernel = "g", bw = SRT, fill = NA, col = "black")
