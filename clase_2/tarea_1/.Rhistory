table_7)
D<-glm(call_back ~ black+comreq+d,
family = binomial(link = "probit"),
table_7)
E<-glm(call_back ~ black+orgreq+e,
family = binomial(link = "probit"),
table_7)
EFE<-glm(call_back ~ black+educreq+f,
family = binomial(link = "probit"),
table_7)
G<-glm(call_back ~ black+tot_req+g,
family = binomial(link = "probit"),
table_7)
a<-margins(A, variables ="a")
b<-margins(B, variables ="b")
c<-margins(C, variables ="c")
d<-margins(D, variables ="d")
e<-margins(E, variables ="e")
f<-margins(EFE, variables ="f")
g<-margins(G, variables ="g")
avg_margin_vector<-(a,b,c,d,e,f,g)
View(b)
# para esta tarea tengo que hacer un poco de rodeo pues no supe como calcular el efecto marginal promedio de la interacción con el comando margins
# el rodeo consisito en desde la base de datos crear variables con la interacción que necesitaré, de esta manera la trato como una variable unica
# ahora margins puede calcular el efecto marginal promedio solamente de la interacción
table_7<-data%>%
select (call_back,black,req,expreq, eoe,compreq,comreq,orgreq,educreq)%>%
mutate(tot_req=sum(expreq+ eoe+compreq+comreq+orgreq+educreq),
a=req*black,
b=expreq*black,
c=compreq*black,
d=comreq*black,
e=orgreq*black,
f=educreq*black,
g=tot_req*black )
A<-glm(call_back ~ black+req+a,
family = binomial(link = "probit"),
table_7)
B<-glm(call_back ~ black+expreq+b,
family = binomial(link = "probit"),
table_7)
C<-glm(call_back ~ black+compreq+c,
family = binomial(link = "probit"),
table_7)
D<-glm(call_back ~ black+comreq+d,
family = binomial(link = "probit"),
table_7)
E<-glm(call_back ~ black+orgreq+e,
family = binomial(link = "probit"),
table_7)
EFE<-glm(call_back ~ black+educreq+f,
family = binomial(link = "probit"),
table_7)
G<-glm(call_back ~ black+tot_req+g,
family = binomial(link = "probit"),
table_7)
a<-margins(A, variables ="a")
b<-margins(B, variables ="b")
c<-margins(C, variables ="c")
d<-margins(D, variables ="d")
e<-margins(E, variables ="e")
f<-margins(EFE, variables ="f")
g<-margins(G, variables ="g")
avg_margin_vector<-(a,b,c,d,e,f,g)
a<-margins(A, variables ="a")
margins(A, variables ="a")
print(margins(A, variables ="a"))
hola<-margins(A, variables ="a")
margins(A, variables ="a")
a<margins::margins(A, variables ="a")
a<-margins::margins(A, variables ="a")
margins(A, variables ="a")
print(margins(A, variables ="a"))
a=margins(A, variables ="a")
a==margins(A, variables ="a")
# para esta tarea tengo que hacer un poco de rodeo pues no supe como calcular el efecto marginal promedio de la interacción con el comando margins
# el rodeo consisito en desde la base de datos crear variables con la interacción que necesitaré, de esta manera la trato como una variable unica
# ahora margins puede calcular el efecto marginal promedio solamente de la interacción
table_7<-data%>%
select (call_back,black,req,expreq, eoe,compreq,comreq,orgreq,educreq)%>%
mutate(tot_req=sum(expreq+ eoe+compreq+comreq+orgreq+educreq),
a=req*black,
b=expreq*black,
c=compreq*black,
d=comreq*black,
e=orgreq*black,
f=educreq*black,
g=tot_req*black )
A<-glm(call_back ~ black+req+a,
family = binomial(link = "probit"),
table_7)
B<-glm(call_back ~ black+expreq+b,
family = binomial(link = "probit"),
table_7)
C<-glm(call_back ~ black+compreq+c,
family = binomial(link = "probit"),
table_7)
D<-glm(call_back ~ black+comreq+d,
family = binomial(link = "probit"),
table_7)
E<-glm(call_back ~ black+orgreq+e,
family = binomial(link = "probit"),
table_7)
F<-glm(call_back ~ black+educreq+f,
family = binomial(link = "probit"),
table_7)
G<-glm(call_back ~ black+tot_req+g,
family = binomial(link = "probit"),
table_7)
a<-margins(A, variables ="a")
b<-margins(B, variables ="b")
c<-margins(C, variables ="c")
d<-margins(D, variables ="d")
e<-margins(E, variables ="e")
f<-margins(F, variables ="f")
g<-margins(G, variables ="g")
as.data.frame(margins(A, variables ="a"))
margins(A, variables ="a")
summary(margins(A, variables ="a"))
a<-summary(margins(A, variables ="a"))
View(a)
a<-summary(margins(A, variables ="a"))
b<-summary(margins(B, variables ="b"))
c<-summary(margins(C, variables ="c"))
d<-summary(margins(D, variables ="d"))
e<-summary(margins(E, variables ="e"))
f<-summary(margins(F, variables ="f"))
g<-summary(margins(G, variables ="g"))
marginal_avg<-c(a$AME,b$AME)
marginal_avg<-as.data.frame(a$AME,b$AME)
View(marginal_avg)
marginal_avg<-c(a$AME,b$AME,c$AME,d$AME,e$AME,f$AME.g$AME.)
View(table_7)
tabla_7_final<-tabla_7  %>%
select(call_back,req,expreq, eoe,compreq,comreq,orgreq,educreq) %>%
group_by(call_back,req,expreq, eoe,compreq,comreq,orgreq,educreq) %>%
summarise(media_muestral = mean(call_back), obs_control = n(),var_c=var(call_back))
table_7_final<-table_7%>%
select(call_back,req,expreq, eoe,compreq,comreq,orgreq,educreq) %>%
group_by(call_back,req,expreq, eoe,compreq,comreq,orgreq,educreq) %>%
summarise(media_muestral = mean(call_back), obs_control = n(),var_c=var(call_back))
View(table_7_final)
table_7_final<-table_7%>%
select(call_back,req,expreq, eoe,compreq,comreq,orgreq,educreq) %>%
group_by(req,expreq, eoe,compreq,comreq,orgreq,educreq) %>%
summarise(media_muestral = mean(call_back), obs_control = n(),var_c=var(call_back))
View(table_7)
View(table_7_final)
table_7_final<-table_7%>%
select(call_back,req,expreq,compreq,comreq,orgreq,educreq) %>%
group_by(req,expreq, eoe,compreq,comreq,orgreq,educreq) %>%
summarise(media_muestral = mean(call_back), obs_control = n(),var_c=var(call_back))
table_7_final<-table_7%>%
select(call_back,req,expreq,compreq,comreq,orgreq,educreq) %>%
group_by(req,expreq,compreq,comreq,orgreq,educreq) %>%
summarise(media_muestral = mean(call_back), obs_control = n(),var_c=var(call_back))
View(table_7_final)
# Siguiendo con el inciso,  el primer paso es dividir la base de datos en 3 bloques con solo las variables que necesitamos
personal_info<-data%>%
select (black,female,high,chicago) #Aquí omitimos callback pues esa es información del outcome y firstname, pues el treatment es black
cv_info<-data%>%
select (ofjobs,yearsexp,honors,volunteer,military,
empholes,workinschool,email,computerskills,
specialskills,college,black)
employer_info<-data%>%
select (expminreq, eoe,manager,supervisor,secretary,
offsupport,salesrep, retailsales,req,expreq,
comreq, educreq, compreq,orgreq, manuf,transcom,
bankreal, trade,busservice,othservice,missind,
black)
bt_personal<-balance_table(personal_info,treatment = "black")
bt_cv<-balance_table(cv_info,treatment = "black")
bt_employer<-balance_table(employer_info,treatment = "black")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = F)
# Carga las librerias
library(readstata13)
library(RCT)
library(sandwich)
library(EnvStats)
library(tidyr)
library(dplyr)
library(kableExtra)
library(stargazer)
library(margins)
options(scipen=999)
# Carga la base de datos
data<-read.dta13("names.dta")
sum(is.na(data$expminreq))
# Para este inciso debemos crear algunas tablas de balance
# Una para información de cada supuesto individuo, otra para información del cv y otra para información de las empresas
# Para esto necestiamos que las variables que necesitamos sean númericas, lo cual no es problema excepto por una columna, "expminreq" a la cual le haremos una pequeña limpieza
summary(factor(data$expminreq))
# Como podemos observar cuenta con 2746 valores nulos (que aparecen con un espacio en blacno " ") y 1064 valores con la categoría "some". Esto nos puede dar problemas a la hora de hacer las tablas de balance: tenemos dos alternativas A)ignorar la variable o B) intentar imputar los valores de some con el promedio de los valores numéricos e imputar con un 0 los valores nulos (asumiendo que su no respuesta indica que no se necesitaba esperiencia mínima)
#promedio
(0*4+8*.5+1*142+10*18+2*356+3*331+4*8+5*163+6*8+7*12+8*10)/
(4+8+142+18+356+331+8+163+8+12+10)
#El promedio de experiencia que soliticaban las vacantes que si respondieron ese inciso fue de 2.91 y la moda de 2 (seguido de 3). En este sentido, creo que el promedio es un buen indicador de "some" por lo que imputamos el valor.
data$expminreq[data$expminreq==" "] <- NA
data$expminreq[is.na(data$expminreq)] <- 0
data$expminreq[data$expminreq=="some"] <- 2.91
data$expminreq<-as.numeric(data$expminreq)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = F)
# Carga las librerias
library(readstata13)
library(RCT)
library(sandwich)
library(EnvStats)
library(tidyr)
library(dplyr)
library(kableExtra)
library(stargazer)
library(margins)
options(scipen=999)
# Carga la base de datos
data<-read.dta13("names.dta")
sum(is.na(data$expminreq))
# Para este inciso debemos crear algunas tablas de balance
# Una para información de cada supuesto individuo, otra para información del cv y otra para información de las empresas
# Para esto necestiamos que las variables que necesitamos sean númericas, lo cual no es problema excepto por una columna, "expminreq" a la cual le haremos una pequeña limpieza
summary(factor(data$expminreq))
# Como podemos observar cuenta con 2746 valores nulos (que aparecen con un espacio en blacno " ") y 1064 valores con la categoría "some". Esto nos puede dar problemas a la hora de hacer las tablas de balance: tenemos dos alternativas A)ignorar la variable o B) intentar imputar los valores de some con el promedio de los valores numéricos e imputar con un 0 los valores nulos (asumiendo que su no respuesta indica que no se necesitaba esperiencia mínima)
#promedio
(0*4+8*.5+1*142+10*18+2*356+3*331+4*8+5*163+6*8+7*12+8*10)/
(4+8+142+18+356+331+8+163+8+12+10)
#El promedio de experiencia que soliticaban las vacantes que si respondieron ese inciso fue de 2.91 y la moda de 2 (seguido de 3). En este sentido, creo que el promedio es un buen indicador de "some" por lo que imputamos el valor.
data$expminreq[data$expminreq==" "] <- NA
data$expminreq[is.na(data$expminreq)] <- 0
data$expminreq[data$expminreq=="some"] <- 2.91
data$expminreq<-as.numeric(data$expminreq)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = F)
# Carga las librerias
library(readstata13)
library(RCT)
library(sandwich)
library(EnvStats)
library(tidyr)
library(dplyr)
library(kableExtra)
library(stargazer)
library(margins)
options(scipen=999)
# Carga la base de datos
data<-read.dta13("names.dta")
sum(is.na(data$expminreq))
# Para este inciso debemos crear algunas tablas de balance
# Una para información de cada supuesto individuo, otra para información del cv y otra para información de las empresas
# Para esto necestiamos que las variables que necesitamos sean númericas, lo cual no es problema excepto por una columna, "expminreq" a la cual le haremos una pequeña limpieza
summary(factor(data$expminreq))
# Como podemos observar cuenta con 2746 valores nulos (que aparecen con un espacio en blacno " ") y 1064 valores con la categoría "some". Esto nos puede dar problemas a la hora de hacer las tablas de balance: tenemos dos alternativas A)ignorar la variable o B) intentar imputar los valores de some con el promedio de los valores numéricos e imputar con un 0 los valores nulos (asumiendo que su no respuesta indica que no se necesitaba esperiencia mínima)
#promedio
(0*4+8*.5+1*142+10*18+2*356+3*331+4*8+5*163+6*8+7*12+8*10)/
(4+8+142+18+356+331+8+163+8+12+10)
#El promedio de experiencia que soliticaban las vacantes que si respondieron ese inciso fue de 2.91 y la moda de 2 (seguido de 3). En este sentido, creo que el promedio es un buen indicador de "some" por lo que imputamos el valor.
data$expminreq[data$expminreq==" "] <- NA
data$expminreq[is.na(data$expminreq)] <- 0
data$expminreq[data$expminreq=="some"] <- 2.91
data$expminreq<-as.numeric(data$expminreq)
# Siguiendo con el inciso,  el primer paso es dividir la base de datos en 3 bloques con solo las variables que necesitamos
personal_info<-data%>%
select (black,female,high,chicago) #Aquí omitimos callback pues esa es información del outcome y firstname, pues el treatment es black
cv_info<-data%>%
select (ofjobs,yearsexp,honors,volunteer,military,
empholes,workinschool,email,computerskills,
specialskills,college,black)
employer_info<-data%>%
select (expminreq, eoe,manager,supervisor,secretary,
offsupport,salesrep, retailsales,req,expreq,
comreq, educreq, compreq,orgreq, manuf,transcom,
bankreal, trade,busservice,othservice,missind,
black)
bt_personal<-balance_table(personal_info,treatment = "black")
bt_cv<-balance_table(cv_info,treatment = "black")
bt_employer<-balance_table(employer_info,treatment = "black")
stargazer(as.data.frame(bt_personal),type="text",summary=FALSE)
stargazer(as.data.frame(bt_cv),type="text",summary=FALSE)
stargazer(as.data.frame(bt_employer),type="text",summary=FALSE)
# Caber notar que la columna que limpiamos, expminreq, resulto balanceada si imputabamos la moda, la media, sin tratar los NAs y tratando los NAs,
table_7_final<-table_7%>%
select(call_back,req,expreq,compreq,comreq,orgreq,educreq)
balance_table(table_7_final)
A<-lm(call_back ~ req,
family = binomial(link = "probit"),
table_7)
A
A<-lm(call_back ~ req,
table_7)
A
mean(data$req)
table_7_final<-data%>%
select (req,expreq, eoe,compreq,comreq,orgreq,educreq)%>%
group_by(req,expreq, eoe,compreq,comreq,orgreq,educreq) %>%
summarise(across(everything(), mean))
View(table_7_final)
table_7_final<-data%>%
select (req,expreq, eoe,compreq,comreq,orgreq,educreq)%>%
group_by(req,expreq, eoe,compreq,comreq,orgreq,educreq) %>%
summarise(across(everything(), mean))
View(table_7_final)
table_7_final<-data%>%
select (req,expreq, eoe,compreq,comreq,orgreq,educreq)%>%
summarise(across(everything(), mean))
View(table_7_final)
table_7_final<-data%>%
select (req,expreq, eoe,compreq,comreq,orgreq,educreq)%>%
summarise(across(everything(), list(mean = mean, sd = sd, se = ~sd(.)/sqrt(.))))
View(table_7_final)
table_7_final<-data%>%
select (req,expreq, eoe,compreq,comreq,orgreq,educreq)%>%
summarise(across(everything(), mean,sd))
table_7_final<-data%>%
select (req,expreq, eoe,compreq,comreq,orgreq,educreq)%>%
summarise(across(everything(), mean&sd))
table_7_final<-data%>%
select (req,expreq, eoe,compreq,comreq,orgreq,educreq)%>%
group_by(req,expreq, eoe,compreq,comreq,orgreq,educreq)%>%
summarise(grouped, mean=mean(value), sd=sd(value))
View(table_7_final)
table_7_final<-data%>%
select (req,expreq, eoe,compreq,comreq,orgreq,educreq)
tidy(table_7_final)
library(tidyr)
tidy(table_7_final)
tidyr(table_7_final)
tidy(table_7_final)
stargazer(table_7_final)
stargazer(table_7_final,type="text",summary=FALSE)
sapply(table_7_final, mean)
sapply(table_7_final, sd)
tabla<-as.data.frame(sapply(table_7_final, mean),sapply(table_7_final, sd))
View(tabla)
tabla<-data.frame(sapply(table_7_final, mean),sapply(table_7_final, sd))
View(tabla)
table_7<-table_7%>%
select (req,expreq,compreq,comreq,orgreq,educreq,tot_req)
tabla<-data.frame(sapply(table_7_final, mean),sapply(table_7_final, sd))
View(tabla)
tabla<-data.frame(sapply(table_7, mean),sapply(table_7, sd))
View(tabla)
table_7<-data%>%
select (call_back,black,req,expreq, eoe,compreq,comreq,orgreq,educreq)%>%
mutate(tot_req=sum(expreq+compreq+comreq+orgreq+educreq),
a=req*black,
b=expreq*black,
c=compreq*black,
d=comreq*black,
e=orgreq*black,
f=educreq*black,
g=tot_req*black )
View(table_7)
table_7<-data%>%
select (call_back,black,req,expreq, eoe,compreq,comreq,orgreq,educreq)%>%
mutate(tot_req=(expreq+compreq+comreq+orgreq+educreq),
a=req*black,
b=expreq*black,
c=compreq*black,
d=comreq*black,
e=orgreq*black,
f=educreq*black,
g=tot_req*black )
A<-glm(call_back ~ black+req+a,
family = binomial(link = "probit"),
table_7)
B<-glm(call_back ~ black+expreq+b,
family = binomial(link = "probit"),
table_7)
C<-glm(call_back ~ black+compreq+c,
family = binomial(link = "probit"),
table_7)
D<-glm(call_back ~ black+comreq+d,
family = binomial(link = "probit"),
table_7)
E<-glm(call_back ~ black+orgreq+e,
family = binomial(link = "probit"),
table_7)
F<-glm(call_back ~ black+educreq+f,
family = binomial(link = "probit"),
table_7)
G<-glm(call_back ~ black+tot_req+g,
family = binomial(link = "probit"),
table_7)
a<-summary(margins(A, variables ="a"))
b<-summary(margins(B, variables ="b"))
c<-summary(margins(C, variables ="c"))
d<-summary(margins(D, variables ="d"))
e<-summary(margins(E, variables ="e"))
f<-summary(margins(F, variables ="f"))
g<-summary(margins(G, variables ="g"))
marginal_avg<-c(a$AME,b$AME,c$AME,d$AME,e$AME,f$AME.g$AME.)
table_7<-table_7%>%
select (req,expreq,compreq,comreq,orgreq,educreq,tot_req)
tabla<-data.frame(sapply(table_7, mean),sapply(table_7, sd))
View(tabla)
tabla<-data.frame(sapply(table_7, mean),sapply(table_7, sd),marginal_avg)
marginal_avg<-data.frame(a$AME,b$AME,c$AME,d$AME,e$AME,f$AME.g$AME)
View(g)
marginal_avg<-as.data.frame(a$AME,b$AME,c$AME,d$AME,e$AME,f$AME.g$AME)
View(marginal_avg)
marginal_avg<-c(a$AME,b$AME,c$AME,d$AME,e$AME,f$AME.g$AME)
marginal_avg
E<-glm(call_back ~ black+orgreq+e,
family = binomial(link = "probit"),
table_7)
table_7<-data%>%
select (call_back,black,req,expreq, eoe,compreq,comreq,orgreq,educreq)%>%
mutate(tot_req=(expreq+compreq+comreq+orgreq+educreq),
a=req*black,
b=expreq*black,
c=compreq*black,
d=comreq*black,
e=orgreq*black,
f=educreq*black,
g=tot_req*black )
A<-glm(call_back ~ black+req+a,
family = binomial(link = "probit"),
table_7)
B<-glm(call_back ~ black+expreq+b,
family = binomial(link = "probit"),
table_7)
C<-glm(call_back ~ black+compreq+c,
family = binomial(link = "probit"),
table_7)
D<-glm(call_back ~ black+comreq+d,
family = binomial(link = "probit"),
table_7)
E<-glm(call_back ~ black+orgreq+e,
family = binomial(link = "probit"),
table_7)
EFE<-glm(call_back ~ black+educreq+f,
family = binomial(link = "probit"),
table_7)
G<-glm(call_back ~ black+tot_req+g,
family = binomial(link = "probit"),
table_7)
a<-summary(margins(A, variables ="a"))
b<-summary(margins(B, variables ="b"))
c<-summary(margins(C, variables ="c"))
d<-summary(margins(D, variables ="d"))
e<-summary(margins(E, variables ="e"))
f<-summary(margins(EFE, variables ="f"))
g<-summary(margins(G, variables ="g"))
marginal_avg<-c(a$AME,b$AME,c$AME,d$AME,e$AME,f$AME.g$AME)
table_7<-table_7%>%
select (req,expreq,compreq,comreq,orgreq,educreq,tot_req)
tabla<-data.frame(sapply(table_7, mean),sapply(table_7, sd))
marginal_avg
marginal_avg<-c(a$AME,b$AME,c$AME,d$AME,e$AME,f$AME,g$AME)
tabla<-data.frame(sapply(table_7, mean),sapply(table_7, sd),marginal_avg)
View(tabla)
# paso 5: agrupo toda la información en una sola tabla
tabla<-data.frame(sapply(table_7, mean),sapply(table_7, sd),marginal_avg,marginal_sd)
# para esta tarea tengo que hacer un poco de rodeo pues no supe como calcular el efecto marginal promedio de la interacción con el comando margins
# el rodeo consisito en desde la base de datos crear variables con la interacción que necesitaré, de esta manera la trato como una variable unica
# ahora margins puede calcular el efecto marginal promedio solamente de la interacción
# paso 1: creo la base de datos con las interacciones
table_7<-data%>%
select (call_back,black,req,expreq, eoe,compreq,comreq,orgreq,educreq)%>%
mutate(tot_req=(expreq+compreq+comreq+orgreq+educreq),
a=req*black,
b=expreq*black,
c=compreq*black,
d=comreq*black,
e=orgreq*black,
f=educreq*black,
g=tot_req*black )
# paso 2: estimo los modelos probits
A<-glm(call_back ~ black+req+a,
family = binomial(link = "probit"),
table_7)
B<-glm(call_back ~ black+expreq+b,
family = binomial(link = "probit"),
table_7)
C<-glm(call_back ~ black+compreq+c,
family = binomial(link = "probit"),
table_7)
D<-glm(call_back ~ black+comreq+d,
family = binomial(link = "probit"),
table_7)
E<-glm(call_back ~ black+orgreq+e,
family = binomial(link = "probit"),
table_7)
EFE<-glm(call_back ~ black+educreq+f,
family = binomial(link = "probit"),
table_7)
G<-glm(call_back ~ black+tot_req+g,
family = binomial(link = "probit"),
table_7)
# paso 3: extraigo el efecto marginal promedio y su desviación estandar
a<-summary(margins(A, variables ="a"))
b<-summary(margins(B, variables ="b"))
c<-summary(margins(C, variables ="c"))
d<-summary(margins(D, variables ="d"))
e<-summary(margins(E, variables ="e"))
f<-summary(margins(EFE, variables ="f"))
g<-summary(margins(G, variables ="g"))
# los guardo en dos vectores
marginal_avg<-c(a$AME,b$AME,c$AME,d$AME,e$AME,f$AME,g$AME)
marginal_sd<-c(a$SE,b$SE,c$SE,d$SE,e$SE,f$SE,g$SE)
# paso 4: estimo la media y desvación estandar para cada variable
table_7<-table_7%>%
select (req,expreq,compreq,comreq,orgreq,educreq,tot_req)
# paso 5: agrupo toda la información en una sola tabla
tabla<-data.frame(sapply(table_7, mean),sapply(table_7, sd),marginal_avg,marginal_sd)
# paso 6: realizo algunos retoques estéticos
kable(tabla, row.names = c("Any requirement?","Experience?","Computer skills?", "Communication skills?","Organization skills?", "Education?", "Total number of requirements"), col.names = c("Sample mean", "SD","Marginal effect","Sd"))
kable(tabla, col.names = c("Sample mean", "SD","Marginal effect","Sd"))
kable(tabla, row.names = NULL, col.names = c("Sample mean", "SD","Marginal effect","Sd"))
kable(tabla, row.names = F, col.names = c("Sample mean", "SD","Marginal effect","Sd"))
id = c("Any requirement?","Experience?","Computer skills?", "Communication skills?","Organization skills?", "Education?", "Total number of requirements")
tabla<-data.frame(id,sapply(table_7, mean),sapply(table_7, sd),marginal_avg,marginal_sd)
kable(tabla, col.names = c("Requirement","Sample mean", "SD","Marginal effect","Sd"), booktabs=T)
kable(tabla, col.names = c("Requirement","Sample mean", "SD","Marginal effect","Sd"), booktabs=T, digits = 2)
kable(tabla, col.names = c("Requirement","Sample mean", "SD","Marginal effect","Sd"), booktabs=T, digits = 3)
